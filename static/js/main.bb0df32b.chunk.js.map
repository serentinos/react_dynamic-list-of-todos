{"version":3,"sources":["components/TodoFilter/TodoFilter.tsx","components/TodoList/TodoItem.tsx","components/TodoList/TodoList.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoFilterMode","TodoItem","todo","setSelectedTodo","isSelectedTodo","title","id","completed","className","cn","type","onClick","TodoList","todos","selectedTodoId","map","isSelected","TodoFilter","query","setQuery","filterStatus","setFilterStatus","value","onChange","event","target","Object","entries","key","filterTypeName","toUpperCase","slice","placeholder","preventDefault","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onSelectTodo","useState","isLoading","setIsLoading","user","setUser","useEffect","fetchData","a","userId","result","Error","href","email","name","App","isTodosLoaded","setIsTodosLoaded","setTodos","ALL","selectedTodo","preparedTodos","useMemo","filter","regex","RegExp","trim","isStatusMatch","todoCompleted","filterStage","COMPLETED","ACTIVE","checkStatus","test","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb0df32b.chunk.js","sourcesContent":["import { ChangeEvent, FC } from 'react';\n\ninterface Props {\n  query: string,\n  filterStatus: string,\n  setQuery: React.Dispatch<React.SetStateAction<string>>,\n  setFilterStatus: React.Dispatch<React.SetStateAction<TodoFilterMode>>,\n}\n\nexport enum TodoFilterMode {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n\nexport const TodoFilter:FC<Props> = ({\n  query,\n  setQuery,\n  filterStatus,\n  setFilterStatus,\n}) => {\n  const resetQuery = () => setQuery('');\n\n  const handleQueryChange = (\n    event: ChangeEvent<HTMLInputElement>,\n  ) => {\n    event.preventDefault();\n    setQuery(event.target.value);\n  };\n\n  const handleFilterMode = (event:ChangeEvent<HTMLSelectElement>) => {\n    setFilterStatus(event.target.value as TodoFilterMode);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterStatus}\n            onChange={handleFilterMode}\n          >\n            {Object.entries(TodoFilterMode).map(([key, value]) => {\n              const filterTypeName = value[0].toUpperCase() + value.slice(1);\n\n              return (\n                <option\n                  key={key}\n                  value={value}\n                >\n                  {filterTypeName}\n                </option>\n              );\n            })}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              aria-label=\"clear search button\"\n              className=\"delete\"\n              onClick={resetQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import cn from 'classnames';\nimport { FC } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props{\n  todo: Todo;\n  setSelectedTodo: React.Dispatch<React.SetStateAction<Todo | null>>;\n  isSelectedTodo: boolean;\n}\n\nexport const TodoItem:FC<Props> = ({\n  todo,\n  setSelectedTodo,\n  isSelectedTodo,\n}) => {\n  const { title, id, completed } = todo;\n\n  return (\n    <tr\n      key={id}\n      data-cy=\"todo\"\n      className={cn({ 'has-background-info-light': isSelectedTodo })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn({\n          'has-text-success': completed,\n          'has-text-danger': !completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => setSelectedTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': !isSelectedTodo,\n              'fa-eye-slash': isSelectedTodo,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from './TodoItem';\n\ninterface Props {\n  todos: Todo[];\n  setSelectedTodo: React.Dispatch<React.SetStateAction<Todo | null>>;\n  selectedTodoId: number | undefined;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setSelectedTodo,\n  selectedTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const isSelected = selectedTodoId === todo.id;\n\n          return (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              setSelectedTodo={setSelectedTodo}\n              isSelectedTodo={isSelected}\n            />\n          );\n        })}\n\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  todo: Todo;\n  onSelectTodo: React.Dispatch<React.SetStateAction<Todo | null>>;\n}\n\nexport const TodoModal: React.FC<Props> = ({ todo, onSelectTodo }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await getUser(todo.userId);\n\n        setUser(result);\n        setIsLoading(false);\n      } catch (error) {\n        throw new Error('Something went wrong: Could load data');\n      }\n    };\n\n    fetchData();\n  }, [todo.userId]);\n\n  const handleCloseButton = () => {\n    onSelectTodo(null);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseButton}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter, TodoFilterMode } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\n\nconst checkStatus = (\n  todoCompleted: boolean,\n  filterStage: string,\n) => {\n  switch (filterStage) {\n    case TodoFilterMode.COMPLETED:\n      return todoCompleted === true;\n    case TodoFilterMode.ACTIVE:\n      return todoCompleted === false;\n    default:\n      return true;\n  }\n};\n\nexport const App: React.FC = () => {\n  const [isTodosLoaded, setIsTodosLoaded] = useState(false);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [filterStatus, setFilterStatus] = useState<TodoFilterMode>(TodoFilterMode.ALL);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setTodos(await getTodos());\n        setIsTodosLoaded(true);\n      } catch (error) {\n        throw new Error('Something went wrong: Could load data');\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const preparedTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const regex = new RegExp(query.trim(), 'gi');\n\n      const isStatusMatch = checkStatus(todo.completed, filterStatus);\n\n      return regex.test(todo.title) && isStatusMatch;\n    });\n  }, [todos, query, filterStatus]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                filterStatus={filterStatus}\n                setFilterStatus={setFilterStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isTodosLoaded\n                ? (\n                  <TodoList\n                    todos={preparedTodos}\n                    setSelectedTodo={setSelectedTodo}\n                    selectedTodoId={selectedTodo?.id}\n                  />\n                ) : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n      && (\n        <TodoModal\n          todo={selectedTodo}\n          onSelectTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}